require: "rubocop-rspec"

# RSpecのContextの文言を日本語で書いているため、英語のフォーマット指定をdisableする
RSpec/ContextWording:
  Enabled: false

# subject はコピペ可搬性よりもそのまま USAGE であって欲しい
RSpec/DescribedClass:
  EnforcedStyle: explicit

# it が一つしか無いような context では空行を開ける方が読みづらい
RSpec/EmptyLineAfterFinalLet:
  Enabled: false

# each で回したり aggregate_failures 使ってたりすると厳しい。
# feature spec は exclude でも良いかもしれない。
# ヒアドキュメント使うと一瞬で超えるので disable も検討。
RSpec/ExampleLength:
  Enabled: false

# block の方がテスト対象が
# * `{}` の前後のスペースと相まって目立つ
# * 普段書く形と同じなので自然に脳内に入ってくる
RSpec/ExpectChange:
  EnforcedStyle: block

# let を使うのは context 間で条件が違うものが存在する時だけにしたい。
# before の方が事前条件を整えていることが分かりやすい。
RSpec/InstanceVariable:
  Enabled: false

# 検索処理の確認など、「特定のもののみ抽出できること」のチェック時は、let!を使ってレコードを作成したい
# RSpecのlet!を制限して無駄なクエリを発行するのはテストが遅くなるため避けたい
RSpec/LetSetup:
  Enabled: false

# APIの返却値テストなど、複数の項目を1つのitブロック内でテストしたい
RSpec/MultipleExpectations:
  Enabled: false

RSpec/MultipleMemoizedHelpers:
  Max: 8

# 変に名前つけて呼ぶ方が分かりづらい。
# テスト対象メソッドを呼ぶだけの subject 以外を書かないようにする方が効く。
RSpec/NamedSubject:
  Enabled: false

# RSpecでネストが深くなるのは、ある程度は仕方がないと判断
# ただ、これ以上深くなる場合は、ファイルを分けたり、describeとして分けたりしてほしい
RSpec/NestedGroups:
  Max: 4

# ブロックは初見だと返り値を書いていると気づけないので and_return にしたいが、
# ブロックの方が見た目がスッキリして見やすいので、どちらでもお好きにどうぞ。
RSpec/ReturnFromStub:
  Enabled: false

# APIの返却値テストなど、たくさんの項目を1つのitブロック内でテストしたい
RSpec/ScatteredLet:
  Enabled: false